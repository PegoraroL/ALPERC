seed_rank=2105,
paral=T)
sigma_cand
factorial(length(names(sigma_cand)[-1])*2)/(factorial(length(names(sigma_cand)[-1]))*factorial(length(names(sigma_cand)[-1])*2-length(names(sigma_cand)[-1])))
1/factorial(length(names(sigma_cand)[-1])*2)/(factorial(length(names(sigma_cand)[-1]))*factorial(length(names(sigma_cand)[-1])*2-length(names(sigma_cand)[-1])))
1/20
N_combinat
B
library(ALPERC)
#provo su flammability data
D_cand <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/flammability/D_cand.csv")
S <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/flammability/S.csv")
sigma_cand <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/flammability/sigma_cand.csv")
sigma_cand$rowid<-as.character(sigma_cand$rowid)
D_cand$rowid<-as.character(sigma_cand$rowid)
D_cand<-D_cand%>%relocate(rowid, .before=NULL)
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r5<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=F,
alpha_rank=0.1,
seed_rank=2105,
paral=T)
paral
r5<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=T,
alpha_rank=0.1,
seed_rank=2105,
paral=T)
# Initialize progress bar
progbar <- txtProgressBar(min = 0, max = nc, style = 3, char = "=", width=getOption("width"))
for(nn in 1:nc){
data.pair <- dati[(cell==unique(cell)[pair.comp[nn,1]])|(cell==unique(cell)[pair.comp[nn,2]]),]
res <- test.stat(y = data.pair,stat = st, alternative=1,B, force_n_boot)
P.dependent4dependent[,,nn] <- res$pv
P.dependent4dependent.min[,,nn] <- res$pv.min
P.glob[,1,nn] <- res$pv.comb
P.glob.min[,1,nn] <- res$pv.comb.min
N_permut_vec[nn] <- unique(res$N_permut_comparisons)
#set progress bar
setTxtProgressBar(progbar, nn)
}
data.pair
test.stat(y = data.pair,stat = st, alternative=1,B, force_n_boot)
P.dependent4dependent[,,nn] <- res$pv
force_n_boot
N_combinat
B
r5<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r5
r5<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
library(ALPERC)
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r5<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
library(ALPERC)
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r5<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=5000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r5
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r5<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r5
##Import required data
data("D_cand")
data("sigma_cand")
data("S")
##run the function
r6<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=F,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
sigma_cand
D_cand
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=F,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=F,
alpha_rank=0.05,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=TRUE,
alpha_rank=0.05,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.05,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.05,
seed_rank=2105,
paral=FALSE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:5],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:5],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:5],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
round(0.02324824242, digits=4)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:4],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:6],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:4],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=F,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
r7<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand[,1:4],
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r7
library(ALPERC)
#provo thermoelectric data
D_cand <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/ALPERC_vignettes/data/thermoelectric/D_cand.csv")
S <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/ALPERC_vignettes/data/thermoelectric/S.csv")
sigma_cand <- read.csv2("C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg_parall - Copia/ALPERC_vignettes/data/thermoelectric/sigma_cand.csv")
D_cand$rowid<-as.character(D_cand$rowid)
sigma_cand$rowid<-as.character(sigma_cand$rowid)
##run the function with parallel computation
library(doSNOW)
##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
r3<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=FALSE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r3
r3<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=1000,
force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r3
r3<-ALPERC(n_add=10,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=2000,
# force_n_boot=TRUE,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
r3
?apply()
P
global
P<-global
C<-dim(P)[1]
zeros_and_ones<-ifelse(P<alpha/alpha_coeff,1,0)
alpha_coeff=2
zeros_and_ones<-ifelse(P<alpha/alpha_coeff,1,0)
P
diag(P)
diag(P)<-1
C<-dim(P)[1]
zeros_and_ones<-ifelse(P<alpha/alpha_coeff,1,0)
ifelse(P<alpha/alpha_coeff,1,0)
alpha/alpha_coeff
alpha
alpha=0.1
C<-dim(P)[1]
zeros_and_ones<-ifelse(P<alpha/alpha_coeff,1,0)
zeros_and_ones
global
alpha=0.3
zeros_and_ones<-ifelse(P<alpha/alpha_coeff,1,0)
zeros_and_ones
rank((C-apply(zeros_and_ones,1,sum)),ties.method="min")
(1+apply(zeros_and_ones,2,sum))
r_u<-rank((C-apply(zeros_and_ones,1,sum)),ties.method="min")
r_d<-(1+apply(zeros_and_ones,2,sum))
rbind(r_u,r_d)
apply(rbind(r_u,r_d),2,mean)
library(ALPERC)
?ALPERC
library(ALPERC)
?ALPERC
library(ALPERC)
?ALPERC
?alperc
library(ALPERC)
?alperc
?ALPERC
?ALPERC
library(ALPERC)
?ALPERC
library(ALPERC)
?ALPERC
library(ALPERC)
?ALPERC
?ALPERC_2D_viz
library(ALPERC)
##import saved models
library(hetGP)
model<-readRDS(system.file("data", "Robot_arm.rds", package="ALPERC"))
##run the ALPERC function
ALPERC_results<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105)
##obtain the 2D visualization
ALPERC_2D_viz(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean")
ALPERC_results
#Import required data
data("D_cand")
data("sigma_cand")
data("S")
S
S
##import saved models
library(hetGP)
model<-readRDS(system.file("data", "Robot_arm.rds", package="ALPERC"))
library(doSNOW) ##initialize cluster
cl <- makeCluster(8)
registerDoSNOW(cl)
##run the ALPERC function
ALPERC_results<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105)
stopCluster(cl)
##obtain the 2D visualization
ALPERC_2D_viz(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean")
