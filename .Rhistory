unload = T,
force = T
))
# #attach the ALPERC function
# source("ALPERC_fnct.R")
# #attach the ALPERC visualization functions
# source("ALPERC_2D_viz.R")
#load the package
library(ALPERC)
R.Version()$version.string
installed.packages()[names(sessionInfo()$otherPkgs), "Version"]
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
D_cand
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
S<-as_tibble(read.csv2(paste0(getwd(),"/data_example/S.csv")))
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
S<-as_tibble(read.csv2(paste0(getwd(),"/data_example/S.csv")))
plot2D_multiv_m<-ALPERC_2D_viz_multiv(D_add_j=results$D_add_j,
LAMBDA=results$LAMBDA,
model=model_list,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean")
getwd()
getwd(
)
library(rmarkdown)
getwd()
paste0(getwd(),"/vignettes/ALPERC_IMPLEMENTATION.Rmd")
library(rmarkdown)
output_dir <- "C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg/ALPERC/vignettes"
render(paste0(getwd(),"/vignettes/ALPERC_implementation.Rmd"), output_dir = output_dir, params = list(output_dir = output_dir))
getwd()
output
output_dir <- "output"
output <- file.path("..",output_dir)
output
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
output
output <- file.path("..",output_dir)
output
output_dir="aa"
output <- file.path("..",output_dir)
output
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
output
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
lapply(names(sessionInfo()$otherPkgs), function(pkgs)
detach(
paste0('package:', pkgs),
character.only = T,
unload = T,
force = T
))
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
library(rmarkdown)
library(ranger)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
install.packages("ezknitr")
library(ezknitr)
getwd()
ezknit(file = "vignettes/report.Rmd", out_dir = "output_vignettes")
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ezknitr)
getwd()
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ezknitr)
getwd()
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ALPERC)
library(ALPERC)
library(ALPERC)
dati
library(ALPERC)
?ALPERC
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
?ALPERC
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
asa<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=T)
library(parallel)
library(doParallel)
##initialize cluster
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
resyts<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
stopCluster(cl)
library(ALPERC)
library(ALPERC)
##run the function with parallel computation
library(parallel)
library(doParallel)
##initialize cluster
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
asad<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
stopCluster(cl)
##run the function with parallel computation
library(parallel)
library(doSNOW)
##initialize cluster
cl <- makeCluster(4)
registerDoSNOW(cl)
asad<-ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
stopCluster(cl)
library(foreach)
library(doSNOW)
cl <- makeCluster(4, outfile="") # number of cores. Notice 'outfile'
registerDoSNOW(cl)
iterations <- 100
pb <- txtProgressBar(min = 1, max = iterations, style = 3)
result <- foreach(i = 1:iterations, .combine = rbind) %dopar%
{
s <- summary(rnorm(1e6))[3]
setTxtProgressBar(pb, i)
return(s)
}
close(pb)
stopCluster(cl)
library(ALPERC)
library(foreach)
library(doSNOW)
cl <- makeCluster(4, outfile="") # number of cores. Notice 'outfile'
registerDoSNOW(cl)
iterations <- 100
pb <- txtProgressBar(min = 1, max = iterations, style = 3)
result <- foreach(i = 1:iterations, .combine = rbind) %dopar%
{
s <- summary(rnorm(1e6))[3]
setTxtProgressBar(pb, i)
return(s)
}
close(pb)
stopCluster(cl)
##run the function with parallel computation
library(parallel)
library(doSNOW)
##initialize cluster
cl <- makeCluster(4)
registerDoSNOW(cl)
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=T,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=TRUE)
stopCluster(cl)
library(ALPERC)
library(ALPERC)
?colorRampPalette
?brewer.pal
?nlevels
?colorRampPalette
?dist
dist()
?dist()
?hclust()
?dist_make()
?Reduce()
?reduce
?dist()
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
library(ALPERC)
?hcut
library(ALPERC)
?ALPERC
?makeCluster
?stopCluster
library(ALPERC)
library(ALPERC)
?ALPERC
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
nc
# Initialize progress bar
progbar <- txtProgressBar(min = 0, max = nc, style = 3, char = "=", width=getOption("width"))
getOption("width")
getOption("width")
getOption("width")
?usedist
library(ALPERC)
?ALPERC
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
sigma_cand
sigma_cand_long<-sigma_cand%>%pivot_longer(!names(sigma_cand)[1], names_to = "Ys", values_to = "sigma_pred")
dati=as.data.frame(sigma_cand_long%>%select(-Ys))
set.seed(seed)
cell<-dati[,1] #colonna con i gruppi
C <- dim(table(cell))
#The comparisons
pair.comp = NULL
for(rr in 1:(C-1)){
for(cc in (rr+1):C){
pair.tmp <- c(rr,cc)
pair.comp <- rbind(pair.comp,pair.tmp) # pairs of products
}#for cc
}#for rr
nc = C*(C-1)/2 #no. comparisons
P.dependent4dependent <- P.dependent4dependent.min <- array(dim=c((B+1),(ncol(dati)-1), nc))
B=200
P.glob <- P.glob.min <- array(dim=c((B+1),1, nc))
#n. of dependent variables per dataset
ndependent <- ncol(dati) - 1
# Initialize progress bar
progbar <- txtProgressBar(min = 0, max = nc, style = 3, char = "=", width=getOption("width"))
for(nn in 1:nc){
data.pair <- dati[(cell==unique(cell)[pair.comp[nn,1]])|(cell==unique(cell)[pair.comp[nn,2]]),]
res <- test.stat(y = data.pair,stat = st, alternative=1,B)
P.dependent4dependent[,,nn] <- res$pv
P.dependent4dependent.min[,,nn] <- res$pv.min
P.glob[,1,nn] <- res$pv.comb
P.glob.min[,1,nn] <- res$pv.comb.min
#set progress bar
setTxtProgressBar(progbar, nn)
}
P.dependent4dependent <- P.dependent4dependent.min <- array(dim=c((B+1),(ncol(dati)-1), nc))
P.glob <- P.glob.min <- array(dim=c((B+1),1, nc))
cell<-dati[,1] #colonna con i gruppi
C <- dim(table(cell))
#The comparisons
pair.comp = NULL
for(rr in 1:(C-1)){
for(cc in (rr+1):C){
pair.tmp <- c(rr,cc)
pair.comp <- rbind(pair.comp,pair.tmp) # pairs of products
}#for cc
}#for rr
nc = C*(C-1)/2 #no. comparisons
P.dependent4dependent <- P.dependent4dependent.min <- array(dim=c((B+1),(ncol(dati)-1), nc))
P.glob <- P.glob.min <- array(dim=c((B+1),1, nc))
#n. of dependent variables per dataset
ndependent <- ncol(dati) - 1
# Initialize progress bar
progbar <- txtProgressBar(min = 0, max = nc, style = 3, char = "=", width=getOption("width"))
for(nn in 1:nc){
data.pair <- dati[(cell==unique(cell)[pair.comp[nn,1]])|(cell==unique(cell)[pair.comp[nn,2]]),]
res <- test.stat(y = data.pair,stat = st, alternative=1,B)
P.dependent4dependent[,,nn] <- res$pv
P.dependent4dependent.min[,,nn] <- res$pv.min
P.glob[,1,nn] <- res$pv.comb
P.glob.min[,1,nn] <- res$pv.comb.min
#set progress bar
setTxtProgressBar(progbar, nn)
}
# Initialize progress bar
progbar <- txtProgressBar(min = 0, max = nc, style = 3, char = "=", width=getOption("width"))
for(nn in 1:nc){
data.pair <- dati[(cell==unique(cell)[pair.comp[nn,1]])|(cell==unique(cell)[pair.comp[nn,2]]),]
res <- test.stat(y = data.pair,stat = st, alternative=1,B)
P.dependent4dependent[,,nn] <- res$pv
P.dependent4dependent.min[,,nn] <- res$pv.min
P.glob[,1,nn] <- res$pv.comb
P.glob.min[,1,nn] <- res$pv.comb.min
#set progress bar
print(setTxtProgressBar(progbar, nn))
}
for(nn in 1:nc){
data.pair <- dati[(cell==unique(cell)[pair.comp[nn,1]])|(cell==unique(cell)[pair.comp[nn,2]]),]
res <- test.stat(y = data.pair,stat = st, alternative=1,B)
P.dependent4dependent[,,nn] <- res$pv
P.dependent4dependent.min[,,nn] <- res$pv.min
P.glob[,1,nn] <- res$pv.comb
P.glob.min[,1,nn] <- res$pv.comb.min
#set progress bar
setTxtProgressBar(progbar, nn)
}
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
##Import required data
data(D_cand)
data(sigma_cand)
data(S)
##run the function
ALPERC(n_add=5,
D_cand=D_cand,
sigma_cand=sigma_cand,
S=S,
strategy="exploration",
varimp_distance=TRUE,
n_clust=NULL,
n_boot=500,
alpha_rank=0.1,
seed_rank=2105,
paral=FALSE)
library(ALPERC)
