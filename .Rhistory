SE_pred_y<-((infjack+jack)/2)
pred_grid_y<-as_tibble(cbind(pred_grid,y, SE_pred_y))
pred_grid_y_list[[indicatore]]<-pred_grid_y
y_list[[indicatore]]<-y
SE_pred_y_list[[indicatore]]<-SE_pred_y
#################################
s<-NULL
s<-interp(pred_grid%>%pull(viz_factors[1]), pred_grid%>%pull(viz_factors[2]), y, dupl="mean")
s_list[[indicatore]]<-s
z_list[[indicatore]]<-s$z
#non usiamo s_norm. Just in case dovessimo ampliare funzionalità funzione.
s_norm<-NULL
s_norm<-list(x=(s$x-min(s$x))/(max(s$x)-min(s$x)),y=(s$y-min(s$y))/(max(s$y)-min(s$y)),
z=(s$z-min(s$z))/(max(s$z)-min(s$z)))
s_norm_list[[indicatore]]<-s_norm
lista_z_norm[[indicatore]]<-s_norm$z
}
}
}
if(what_plot=="uncertainty"){
for(mdl in model){
if(class(mdl)[1]=="hetGP"){
y<-SE_pred_y<-NULL
indicatore<-indicatore+1
#this only works for hetgp models!
X<-as.matrix(pred_grid)
y<-(sqrt(predict(x = X, object = mdl)$nugs +
predict(x = X, object = mdl)$sd2))
SE_pred_y<-(sqrt(predict(x = X, object = mdl)$nugs +
predict(x = X, object = mdl)$sd2))
pred_grid_y<-as_tibble(cbind(pred_grid,y, SE_pred_y))
pred_grid_y_list[[indicatore]]<-pred_grid_y
y_list[[indicatore]]<-y
SE_pred_y_list[[indicatore]]<-SE_pred_y
#################################
s<-NULL
s<-interp(pred_grid%>%pull(viz_factors[1]), pred_grid%>%pull(viz_factors[2]), y, dupl="mean")
s_list[[indicatore]]<-s
z_list[[indicatore]]<-s$z
#non usiamo s_norm. Just in case dovessimo ampliare funzionalità funzione.
s_norm<-NULL
s_norm<-list(x=(s$x-min(s$x))/(max(s$x)-min(s$x)),y=(s$y-min(s$y))/(max(s$y)-min(s$y)),
z=(s$z-min(s$z))/(max(s$z)-min(s$z)))
s_norm_list[[indicatore]]<-s_norm
lista_z_norm[[indicatore]]<-s_norm$z
}else if(mdl["method"]=="ranger"){#this only works for ranger models trained via caret!
y<-SE_pred_y<-NULL
indicatore<-indicatore+1
infjack<-NULL
infjack<-predict(mdl$finalModel, pred_grid,type = "se",
se.method = "infjack")$se
jack<-NULL
jack<-predict(mdl$finalModel, pred_grid,type = "se",
se.method = "jack")$se
y<-((infjack+jack)/2)
SE_pred_y<-y
pred_grid_y<-as_tibble(cbind(pred_grid,y, SE_pred_y))
pred_grid_y_list[[indicatore]]<-pred_grid_y
y_list[[indicatore]]<-y
SE_pred_y_list[[indicatore]]<-SE_pred_y
#################################
s<-NULL
s<-interp(pred_grid%>%pull(viz_factors[1]), pred_grid%>%pull(viz_factors[2]), y, dupl="mean")
s_list[[indicatore]]<-s
z_list[[indicatore]]<-s$z
#non usiamo s_norm. Just in case dovessimo ampliare funzionalità funzione.
s_norm<-NULL
s_norm<-list(x=(s$x-min(s$x))/(max(s$x)-min(s$x)),y=(s$y-min(s$y))/(max(s$y)-min(s$y)),
z=(s$z-min(s$z))/(max(s$z)-min(s$z)))
s_norm_list[[indicatore]]<-s_norm
lista_z_norm[[indicatore]]<-s_norm$z
}
}
}
grp_factors<- lapply(names_factors, as.symbol)
grp_factors_viz<-lapply(viz_factors, as.symbol)
runs_to_do<-D_add_j%>%group_by(!!!grp_factors)%>%count()%>%rename(n_repl=n)%>%ungroup()
proposed_points_Xs<-NULL
proposed_points_Xs<-LAMBDA%>%mutate(cluster=as.factor(cluster))
proposed_points_afterclusters_Xs<-proposed_points_Xs
df_runs_to_do<-df_prop_point<-NULL
df_runs_to_do<-right_join(proposed_points_afterclusters_Xs, runs_to_do, by = names_factors)
df_prop_point<-left_join(proposed_points_afterclusters_Xs, runs_to_do, by = names_factors)%>%select(-n_repl)
#here, we consider the case in which we have from 2 to 10 responses. Normalized version
# if(length(s_norm_list)>10){ message("ERROR: The plot is done for up to 10 responses.")
#   stop()}
# if(length(s_norm_list)==2){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==3){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==4){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,s_norm_list[[4]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,s_norm_list[[4]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==5){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,s_norm_list[[4]]$x,s_norm_list[[5]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,s_norm_list[[4]]$y,s_norm_list[[5]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==6){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,s_norm_list[[4]]$x,s_norm_list[[5]]$x,s_norm_list[[6]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,s_norm_list[[4]]$y,s_norm_list[[5]]$y,s_norm_list[[6]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==7){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,
#                                     s_norm_list[[4]]$x,s_norm_list[[5]]$x,s_norm_list[[6]]$x,s_norm_list[[7]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,
#                                     s_norm_list[[4]]$y,s_norm_list[[5]]$y,s_norm_list[[6]]$y,s_norm_list[[7]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==8){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,
#                                     s_norm_list[[4]]$x,s_norm_list[[5]]$x,s_norm_list[[6]]$x,
#                                     s_norm_list[[7]]$x,s_norm_list[[8]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,
#                                     s_norm_list[[4]]$y,s_norm_list[[5]]$y,s_norm_list[[6]]$y,
#                                     s_norm_list[[7]]$y,s_norm_list[[8]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==9){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,
#                                     s_norm_list[[4]]$x,s_norm_list[[5]]$x,s_norm_list[[6]]$x,
#                                     s_norm_list[[7]]$x,s_norm_list[[8]]$x,s_norm_list[[9]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,
#                                     s_norm_list[[4]]$y,s_norm_list[[5]]$y,s_norm_list[[6]]$y,
#                                     s_norm_list[[7]]$y,s_norm_list[[8]]$y,s_norm_list[[9]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# if(length(s_norm_list)==10){
#   s_norm_mean<-list(x=pmap_dbl(list(s_norm_list[[1]]$x,s_norm_list[[2]]$x,s_norm_list[[3]]$x,
#                                     s_norm_list[[4]]$x,s_norm_list[[5]]$x,s_norm_list[[6]]$x,
#                                     s_norm_list[[7]]$x,s_norm_list[[8]]$x,s_norm_list[[9]]$x,s_norm_list[[10]]$x), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
#                     y=pmap_dbl(list(s_norm_list[[1]]$y,s_norm_list[[2]]$y,s_norm_list[[3]]$y,
#                                     s_norm_list[[4]]$y,s_norm_list[[5]]$y,s_norm_list[[6]]$y,
#                                     s_norm_list[[7]]$y,s_norm_list[[8]]$y,s_norm_list[[9]]$y,s_norm_list[[10]]$y), compose(partial(mean, na.rm = T), c)),
#                     # mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
#                     z=Reduce('+',lista_z_norm)/length(lista_z_norm)
#                     # mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
#   )
# }
# here, we consider the case in which we have from 2 to 10 responses. NON Normalized version
if(length(s_list)>10){ message("ERROR: The plot is done for up to 10 responses.")
stop()}
if(length(s_list)==2){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==3){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==4){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,s_list[[4]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,s_list[[4]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==5){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,s_list[[4]]$x,s_list[[5]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,s_list[[4]]$y,s_list[[5]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==6){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,s_list[[4]]$x,s_list[[5]]$x,s_list[[6]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,s_list[[4]]$y,s_list[[5]]$y,s_list[[6]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==7){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,
s_list[[4]]$x,s_list[[5]]$x,s_list[[6]]$x,s_list[[7]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,
s_list[[4]]$y,s_list[[5]]$y,s_list[[6]]$y,s_list[[7]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==8){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,
s_list[[4]]$x,s_list[[5]]$x,s_list[[6]]$x,
s_list[[7]]$x,s_list[[8]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,
s_list[[4]]$y,s_list[[5]]$y,s_list[[6]]$y,
s_list[[7]]$y,s_list[[8]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==9){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,
s_list[[4]]$x,s_list[[5]]$x,s_list[[6]]$x,
s_list[[7]]$x,s_list[[8]]$x,s_list[[9]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,
s_list[[4]]$y,s_list[[5]]$y,s_list[[6]]$y,
s_list[[7]]$y,s_list[[8]]$y,s_list[[9]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
if(length(s_list)==10){
s_norm_mean<-list(x=pmap_dbl(list(s_list[[1]]$x,s_list[[2]]$x,s_list[[3]]$x,
s_list[[4]]$x,s_list[[5]]$x,s_list[[6]]$x,
s_list[[7]]$x,s_list[[8]]$x,s_list[[9]]$x,s_list[[10]]$x), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$x,s2_norm$x,s3_norm$x,s4_norm$x),
y=pmap_dbl(list(s_list[[1]]$y,s_list[[2]]$y,s_list[[3]]$y,
s_list[[4]]$y,s_list[[5]]$y,s_list[[6]]$y,
s_list[[7]]$y,s_list[[8]]$y,s_list[[9]]$y,s_list[[10]]$y), compose(partial(mean, na.rm = T), c)),
# mean(s1_norm$y,s2_norm$y,s3_norm$y,s4_norm$y),
z=Reduce('+',z_list)/length(z_list)
# mean(s1_norm$z,s2_norm$z,s3_norm$z,s4_norm$z)
)
}
pal <- setNames(c25[1:nlevels(df_prop_point$cluster)], levels(df_prop_point$cluster))
df_runs_to_do$colore<-pal[df_runs_to_do$cluster]
df_runs_to_do$colore<-col2hex(df_runs_to_do$colore)
df_runs_to_do<-df_runs_to_do%>%group_by(!!!grp_factors_viz)%>%mutate(n=sum(n_repl))
df_prop_point$colore<-pal[df_prop_point$cluster]
df_prop_point$colore<-col2hex(df_prop_point$colore)
#numero di sfumature di blu per info su rank
pal_blues<-colorRampPalette(brewer.pal(9,"Blues"))(nlevels(as.factor(proposed_points_afterclusters_Xs$rank)))
pal_blues<-setNames(pal_blues[1:nlevels(as.factor(proposed_points_afterclusters_Xs$rank))], levels(as.factor(proposed_points_afterclusters_Xs$rank)))
proposed_points_afterclusters_Xs$colore<-pal_blues[as.factor(proposed_points_afterclusters_Xs$rank)]
sub_2d_plot_element<-c()
for(i in seq_along(fixed_factors)){
sub_tmp<-paste0(fixed_factors[i], "=",fixed_factor_levels[i])
sub_2d_plot_element<-c(sub_2d_plot_element,sub_tmp)
}
sub_2d_plot<-paste(sub_2d_plot_element,collapse=", ")
#compute means of all ys and stderrs
y_mean<-pmap_dbl(y_list, compose(partial(mean, na.rm = T), c))
SE_pred_y_mean<-pmap_dbl(SE_pred_y_list, compose(partial(mean, na.rm = T), c))
pred_grid_y_mean<-pred_grid_y%>%mutate(y=y_mean, SE_pred_y=SE_pred_y_mean)
pred_grid_y_sample<-pred_grid_y_mean[sample(1:nrow(pred_grid_y_mean),n_pred_points),]
# #3D PLOT
plot_3d<-plot_ly(x=s_norm_mean$x,y=s_norm_mean$y,z=s_norm_mean$z, showscale=F) %>%
add_surface(contours = list(
z = list(
show=TRUE,
usecolormap=TRUE,
# highlightcolor="#ff0000",
project=list(z=TRUE)
)
))%>%
add_trace(data = pred_grid_y_sample, x = pred_grid_y_sample%>%pull(viz_factors[2]), y = pred_grid_y_sample%>%pull(viz_factors[1]), z = pred_grid_y_sample$y, mode = "markers", type = "scatter3d",
opacity = 0.3,
error_z = ~list(array = pred_grid_y_sample%>%pull(SE_pred_y),
color = 'red'),
marker = list(size = 3, color = "red", symbol = 104)
)%>%
add_trace(data = df_runs_to_do, x = df_runs_to_do%>%pull(viz_factors[2]), y = df_runs_to_do%>%pull(viz_factors[1]), z = 0, mode = "markers+text", type = "scatter3d",
text = ~n,
marker = list(color=~colore,size = 5))%>%
add_trace(data = df_prop_point, x = df_prop_point%>%pull(viz_factors[2]), y = df_prop_point%>%pull(viz_factors[1]), z = 0, mode = "markers", type = "scatter3d",
marker = list(color=~colore,size = 3))%>%
layout(title = "",
# scene=list(zaxis="Y"),
annotations= list(x = 1, y = 0, text = paste0("x: ", viz_factors[2], ", y: ",viz_factors[1], "; <br>", sub_2d_plot),
showarrow=FALSE),
showlegend = FALSE)
plot_3d
#several models!
s_list<-z_list<-list()
s_norm_list<-list()
data_obs_pred_test_list<-list()
lista_z_norm<-list()
pred_grid_y_list<-y_list<-SE_pred_y_list<-list()
indicatore<-0
mdl<-model[[1]]
y<-SE_pred_y<-NULL
indicatore<-indicatore+1
infjack<-NULL
infjack<-predict(mdl$finalModel, pred_grid,type = "se",
se.method = "infjack")$se
jack<-NULL
jack<-predict(mdl$finalModel, pred_grid,type = "se",
se.method = "jack")$se
y<-((infjack+jack)/2)
SE_pred_y<-y
pred_grid_y<-as_tibble(cbind(pred_grid,y, SE_pred_y))
pred_grid_y_list[[indicatore]]<-pred_grid_y
y_list[[indicatore]]<-y
SE_pred_y_list[[indicatore]]<-SE_pred_y
library(ALPERC)
ALPERC_3D_viz_multiv(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model_list,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean",
n_pred_points=100)
ALPERC_3D_viz_multiv(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model_list,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="uncertainty",
n_pred_points=0)
ALPERC_3D_viz(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model3,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="uncertainty",
n_pred_points=0)
ALPERC_3D_viz(D_add_j=ALPERC_results$D_add_j,
LAMBDA=ALPERC_results$LAMBDA,
model=model3,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean",
n_pred_points=500)
library(ALPERC)
S
?ALPERC
?ALPERC_2D_viz
?ALPERC_2D_viz_multiv
?ALPERC_3D_viz
?ALPERC_3D_viz_multiv
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
#remove all
rm(list = ls())
#detach all loaded packages
lapply(names(sessionInfo()$otherPkgs), function(pkgs)
detach(
paste0('package:', pkgs),
character.only = T,
unload = T,
force = T
))
# #attach the ALPERC function
# source("ALPERC_fnct.R")
# #attach the ALPERC visualization functions
# source("ALPERC_2D_viz.R")
#load the package
library(ALPERC)
R.Version()$version.string
installed.packages()[names(sessionInfo()$otherPkgs), "Version"]
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
D_cand
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
S<-as_tibble(read.csv2(paste0(getwd(),"/data_example/S.csv")))
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
getwd()
D_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/D_cand.csv")))%>%mutate(rowid=as_factor(rowid))
sigma_cand<-as_tibble(read.csv2(paste0(getwd(),"/data_example/sigma_cand.csv")))%>%mutate(rowid=as_factor(rowid))
S<-as_tibble(read.csv2(paste0(getwd(),"/data_example/S.csv")))
plot2D_multiv_m<-ALPERC_2D_viz_multiv(D_add_j=results$D_add_j,
LAMBDA=results$LAMBDA,
model=model_list,
viz_factors=c("B", "C"),
fixed_factors=c("A","D","E","F"),
fixed_factor_levels=c(0.5,0.5,0.5,0.5),
what_plot="mean")
getwd()
getwd(
)
library(rmarkdown)
getwd()
paste0(getwd(),"/vignettes/ALPERC_IMPLEMENTATION.Rmd")
library(rmarkdown)
output_dir <- "C:/Users/Luca/Desktop/Borsa/_Progetti/ALPERC_implementation_pckg/ALPERC/vignettes"
render(paste0(getwd(),"/vignettes/ALPERC_implementation.Rmd"), output_dir = output_dir, params = list(output_dir = output_dir))
getwd()
output
output_dir <- "output"
output <- file.path("..",output_dir)
output
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
output
output <- file.path("..",output_dir)
output
output_dir="aa"
output <- file.path("..",output_dir)
output
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
output
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
lapply(names(sessionInfo()$otherPkgs), function(pkgs)
detach(
paste0('package:', pkgs),
character.only = T,
unload = T,
force = T
))
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
library(rmarkdown)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
library(rmarkdown)
library(ranger)
code_dir <- "vignettes"
report_filename <- "ALPERC_implementation.Rmd"
report_filename <- file.path(code_dir, report_filename)
output_dir <- "vignettes/output_vignettes"
output <- file.path("..",output_dir)
render(report_filename, output_dir = output_dir, params = list(output_dir = output))
install.packages("ezknitr")
library(ezknitr)
getwd()
ezknit(file = "vignettes/report.Rmd", out_dir = "output_vignettes")
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ezknitr)
getwd()
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ezknitr)
getwd()
ezknit(file = "vignettes/ALPERC_implementation.Rmd", out_dir = "output_vignettes")
library(ALPERC)
library(ALPERC)
library(ALPERC)
dati
library(ALPERC)
?ALPERC
